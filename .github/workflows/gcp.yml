name: Britive-GitHub Federated Access for GCP via OpenID Connect

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'  # Runs daily at 08:00 UTC

permissions:
  id-token: write
  contents: read

jobs:
  federated-gcp-access:
    runs-on: ubuntu-latest

    env:
      GCS_BUCKET_NAME: britive-test-corp-gcp-storage
      GCP_PROJECT_ID: "810261868576"
      BRITIVE_TENANT: demo.britive-app.com
      BRITIVE_PROFILE_NAME: GCP - CIS/GCP - CIS/Britive-Test-Corp-Storage-Bucket
      FED_PROVIDER: github-britive

    steps:
      - name: Install pybritive and gcloud CLI
        run: |
          pip install pybritive --quiet

      - name: Checkout GCP access from Britive and authenticate
        run: |
          echo "Checking out GCP login command from Britive..."
      
          set +x
          pybritive checkout -t $BRITIVE_TENANT -m gcloudauth "$BRITIVE_PROFILE_NAME" -P $FED_PROVIDER | grep '^gcloud auth activate-service-account' > gcloud-login.sh
          chmod +x gcloud-login.sh
          ./gcloud-login.sh > /dev/null 2>&1
          set -x

      - name: Confirm GCP Access and Setup Permissions
        run: |
          echo "Verifying GCP access..."
          CURRENT_SA=$(gcloud config list account --format="value(core.account)")
          echo "Current service account: $CURRENT_SA"
          
          echo "Setting project ID..."
          gcloud config set project $GCP_PROJECT_ID
          
          # Grant the current service account bucket-level permissions
          echo "Granting bucket-level permissions to current service account..."
          
          # Try to grant bucket-level permissions directly
          echo "Adding Storage Legacy Bucket Writer to bucket..."
          gsutil iam ch serviceAccount:$CURRENT_SA:legacyBucketWriter gs://$GCS_BUCKET_NAME || echo "Bucket permission grant failed"
          
          echo "Adding Storage Object Admin to bucket..."
          gsutil iam ch serviceAccount:$CURRENT_SA:objectAdmin gs://$GCS_BUCKET_NAME || echo "Object permission grant failed"
          
          # Also try project-level as backup
          gcloud projects add-iam-policy-binding $GCP_PROJECT_ID \
            --member="serviceAccount:$CURRENT_SA" \
            --role="roles/storage.legacyBucketWriter" || echo "Project permission already exists or grant failed"

      - name: Test GCS Access - List Storage Buckets
        run: |
          echo "Listing GCS buckets..."
          gsutil ls
          echo "Checking backup bucket..."
          gsutil ls gs://$GCS_BUCKET_NAME/ || echo "Bucket contents empty or inaccessible"

      - name: Create Daily Backup File in GCS
        run: |
          # Generate current date in YYYY-MM-DD format
          BACKUP_DATE=$(date +%Y-%m-%d)
          BACKUP_FILENAME="Backup-${BACKUP_DATE}.bak"
          
          echo "Creating backup file: $BACKUP_FILENAME"
          
          # Create temporary file with backup content
          echo "Daily Backup $BACKUP_DATE" > /tmp/$BACKUP_FILENAME
          
          # Upload to GCS bucket
          gsutil cp /tmp/$BACKUP_FILENAME gs://$GCS_BUCKET_NAME/$BACKUP_FILENAME
          
          echo "Successfully created backup file: gs://$GCS_BUCKET_NAME/$BACKUP_FILENAME"
          
          # Optional: List files in bucket to confirm upload
          echo "Current files in backup bucket:"
          gsutil ls gs://$GCS_BUCKET_NAME/
